{"version":3,"sources":["app/helper.ts","app/storage/gistStorage.ts","app/feeds/feedService.ts","app/feeds/feed.tsx","app/readingList/readingList.tsx","app/main.tsx","index.tsx"],"names":["DateFormatter","FeedFileKey","FeedStateFileKey","ReadingListFileKey","GithubApiUrl","gistStorage_GistStorage","gistId","_this","this","dataFetched","updateGistUrl","isPushingAnUpdate","isGistUpdated","Promise","resolve","updateDate","Date","lastUpdate","getTime","setSeconds","getSeconds","axios_default","a","get","toISOString","then","response","data","filter","g","id","files","raw_url","state","length","catch","err","console","error","lib","loadGist","getDataFromRemote","feeds","getFeedsData","getFeedStateData","readList","getReadingListData","revisionCount","history","updated_at","saveDataInLocalStorage","warning","JSON","parse","localStorage","getItem","content","last_update","updates","Object","keys","forEach","k","sortListByFeed","map","i","idFeed","title","url","publicationDate","gistUrl","saveFileToGist","patch","newRevisionCount","updateGist","info","updateFeedState","feedId","date","saveFeedsState","description","_a","stringify","saveReadingList","readingList","filesToSave","addItemToReadingList","item","saveAlsoFeedState","findIndex","push","removeItemFromReadingList","msg","indexFound","splice","lastItemRemoved","restoreLastRemoveReadingItem","couldBeRestored","setItem","sortListByDate","sort","i1","i2","defaults","headers","common","Authorization","atob","proxyHandlers","X-Requested-With","User-Agent","responseHandler","feedService_FeedService","FeedService","feedData","offsetDate","storage","proxySwitcher","links","allLinks","clearDate","isOrderNewerFirst","shouldDisplayAllLinks","clearAllFeed","indexNewerLink","Array","storeClearDate","clearFeed","updateFeedDataOnClear","processFeedXml","parser","DOMParser","proxyHandler","xmlDoc","parseFromString","feedFormat","documentElement","tagName","manageRssFeed","manageAtomFeed","sortFeed","ex","calculateRefreshInterval","refreshInterval","inverter","l1","l2","name","logo","icon","httpProtocol","window","location","protocol","restoreInitialClearDate","prototype","l","getLinksToDisplay","isDisplayingAllLinks","displayAllLinks","loadFeedContent","noCorsProxy","undefined","reject","channel","getElementByTagName","webSiteUrl","getElementContentByTagName","items","getElementsByTagName","iItems","link","getLinkRssDate","read","iconUrl","feedName","parseDate","endsWith","substr","element","publicationDateElement","textContent","log","foundElement","children","iElement","linksWebSite","iLinks","tag","getAttribute","iEntries","linkFound","getLinkAtomDate","lastFeedDate","lastRefreshInterval","dates","datesExcludingFirstAndLast","slice","diffs","meanInterval","reduce","d1","d2","Math","max","min","random","padDigits","num","digits","String","join","formatDate","now","getDate","getMonth","getHours","getMinutes","feed_Feed","_super","Feed","apply","arguments","shouldDisplayEmptyFeeds","hiddenTextArea","document","createElement","props","feed","forceUpdate","displayFeedOnTopOfTheScreen","toString","refreshFeed","loadFeed","displayAll","unsecureUrl","unsecured","replace","openAll","open","addToReadList","index","removingItem","removeIfFirstOnClick","setTimeout","decodeEntities","encodedString","innerHTML","value","replaceInTitle","__extends","componentWillMount","timerId","setInterval","componentWillUnmount","clearInterval","refresh","getElementById","scrollIntoView","block","inline","behavior","render","options","linksToDisplay","indexOf","react","className","onClick","key","bind","href","target","rel","enhance","src","readingList_ReadingList","ReadingList","displayReadingList","sortByDate","refreshReadingList","setState","remove","store","openAndRemoveLink","toggleVisibility","changeSort","readingList_extends","componentDidMount","readItems","data_1","find","f","main_Main","Main","isUpdated","feedService","handleVisibilityChange","hidden","reload","hashCode","text","split","b","charCodeAt","main_extends","GetFeed","search","feedServices","feedConfig","newState","__assign","darkModeEnabled","addEventListener","refreshTimer","notSecured","height","width","react_dom"],"mappings":"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","file":"static/js/main.1a4d1e03.chunk.js","sourcesContent":["export namespace DateFormatter {\r\n  const padDigits = (num: number, digits: number = 2): string => {\r\n    return Array(Math.max(digits - String(num).length + 1, 0)).join('0') + num;\r\n  };\r\n\r\n  export const formatDate = (date: Date): string => {\r\n    if (!date) {\r\n      return '-';\r\n    }\r\n    const now = new Date();\r\n    return now.getDate() === date.getDate() &&\r\n    now.getMonth() === date.getMonth()\r\n      ? `${padDigits(date.getHours())}:${padDigits(date.getMinutes())}`\r\n      : `${padDigits(date.getDate())}/${padDigits(date.getMonth() + 1)}`;\r\n  };\r\n}\r\n","import * as axios from 'axios';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nexport interface Gist {\r\n  feeds: FeedData[];\r\n  state: State;\r\n  readList: ReadListItem[];\r\n  revisionCount: number;\r\n}\r\n\r\nexport interface FeedData {\r\n  id: number;\r\n  name: string;\r\n  url: string;\r\n  icon: string;\r\n  noCorsProxy?: boolean;\r\n  notSecured?: boolean;\r\n  enhance?: boolean;\r\n  filter?: string;\r\n}\r\n\r\ninterface Feeds {\r\n  feeds: FeedData[];\r\n}\r\n\r\nexport interface State {\r\n  last_update: Date;\r\n  updates: { [feedid: string]: Date };\r\n  raw_url: string;\r\n}\r\n\r\nexport interface ReadListItem {\r\n  idFeed: number;\r\n  title: string;\r\n  url: string;\r\n  publicationDate: Date;\r\n}\r\n\r\ninterface GistFileDescription {\r\n  filename: string;\r\n  type: string;\r\n  language: string;\r\n  raw_url: string;\r\n  size: string;\r\n  truncated: string;\r\n  content: string;\r\n}\r\n\r\ninterface GistFileContent extends GistFileDescription {\r\n  truncated: string;\r\n  content: string;\r\n}\r\n\r\ninterface GistFilesContent {\r\n  [fileId: string]: GistFileContent;\r\n}\r\n\r\ninterface Storage {\r\n  files: GistFilesContent;\r\n  history: {}[];\r\n  updated_at: string;\r\n}\r\n\r\ninterface GistFileUpdate {\r\n  content: string;\r\n}\r\ninterface GistUpdate {\r\n  description: string;\r\n  files: { [fileId: string]: GistFileUpdate };\r\n}\r\n\r\ninterface UserGistUpdates {\r\n  id: string;\r\n  // updated_at: string;\r\n  files: { [fileId: string]: GistFileDescription };\r\n}\r\n\r\nconst FeedFileKey: string = 'feed.json';\r\nconst FeedStateFileKey: string = 'state.json';\r\nconst ReadingListFileKey: string = 'readlist.json';\r\nconst GithubApiUrl: string = 'https://api.github.com/';\r\n\r\nexport class GistStorage {\r\n  public receivedPromise: axios.AxiosPromise<{}>;\r\n  public dataFetched: boolean = false;\r\n  private lastUpdate: Date;\r\n  private lastItemRemoved: ReadListItem | null;\r\n  private updateGistUrl: string = GithubApiUrl + 'users/pmiossec/gists?since=';\r\n\r\n  private data: Gist;\r\n  private gistUrl: string;\r\n  private gistId: string;\r\n  private isPushingAnUpdate: boolean = false;\r\n\r\n  constructor(gistId: string) {\r\n    this.gistId = gistId;\r\n    this.gistUrl = GithubApiUrl + 'gists/' + gistId;\r\n    axios.default.defaults.headers.common.Authorization = 'Bearer ' + atob('MzAzNzJiMmNkOWQ5NDdmZjhj'\r\n    + 'ODg5MWIzMTUzNDA1MTNmMjJkMTEzNw==');\r\n  }\r\n\r\n  public isGistUpdated = (): Promise<boolean> => {\r\n    if (this.isPushingAnUpdate) {\r\n      return Promise.resolve(false);\r\n    }\r\n    const updateDate = new Date(this.lastUpdate.getTime());\r\n    updateDate.setSeconds(updateDate.getSeconds() + 1);\r\n    return axios.default\r\n    .get(this.updateGistUrl + updateDate.toISOString())\r\n    .then((response: axios.AxiosResponse<UserGistUpdates[]>) => {\r\n      if (response.data.filter(g => g.id === this.gistId\r\n        && g.files[FeedStateFileKey].raw_url !== this.data.state.raw_url).length === 0 ) {\r\n        return false;\r\n      }\r\n      return true;\r\n    })\r\n    .catch(err => {\r\n      // tslint:disable-next-line:no-console\r\n      console.error('Failed to load the gist.', err);\r\n      NotificationManager.error(\r\n        'Failed to load the gist:' + err,\r\n        'Error fetching',\r\n        25000\r\n      );\r\n      return false;\r\n    });\r\n  }\r\n\r\n  public loadGist = (): Promise<Gist> => {\r\n    return this.getDataFromRemote()\r\n      .then(data => {\r\n        if (data === null) {\r\n          return {} as Gist;\r\n        }\r\n        this.data = {\r\n          feeds: this.getFeedsData(data.files),\r\n          state: this.getFeedStateData(data.files),\r\n          readList: this.getReadingListData(data.files),\r\n          revisionCount: data.history.length\r\n        };\r\n        this.lastUpdate = new Date(data.updated_at);\r\n        this.saveDataInLocalStorage();\r\n        // tslint:disable-next-line:no-console\r\n        // console.log('data from gist received:', this.data);\r\n\r\n        return this.data;\r\n      })\r\n      .catch(err => {\r\n        // tslint:disable-next-line:no-console\r\n        console.error(err);\r\n        NotificationManager.warning(\r\n          'Loading data from cache...',\r\n          'Loading data',\r\n          3000\r\n        );\r\n        this.data = JSON.parse(localStorage.getItem('rssPerso')!) as Gist;\r\n        return this.data;\r\n      });\r\n  }\r\n\r\n  //#region Convert gist data\r\n  private getFeedsData = (data: GistFilesContent) => (JSON.parse(data[FeedFileKey].content) as Feeds).feeds;\r\n\r\n  private getFeedStateData = (data: GistFilesContent): State => {\r\n    const content = data[FeedStateFileKey].content;\r\n    if (content === '') {\r\n      return { last_update: new Date(1990, 1, 1), updates: {}, raw_url: '' };\r\n    }\r\n    const state = (JSON.parse(content) as State);\r\n    state.last_update = new Date(state.last_update);\r\n    state.raw_url = data[FeedStateFileKey].raw_url;\r\n    Object.keys(state.updates).forEach(k => state.updates[k] = new Date(state.updates[k]));\r\n    return state;\r\n  }\r\n\r\n  private getReadingListData = (data: GistFilesContent): ReadListItem[] => {\r\n    const content = data[ReadingListFileKey].content;\r\n    if (content === '') {\r\n      return [];\r\n    }\r\n    return this.sortListByFeed((JSON.parse(\r\n      content\r\n    ) as ReadListItem[])\r\n      .map(i => {\r\n        return {\r\n          idFeed: i.idFeed,\r\n          title: i.title,\r\n          url: i.url,\r\n          publicationDate: new Date(i.publicationDate)\r\n        };\r\n      }));\r\n  }\r\n  //#endregion\r\n\r\n  private getDataFromRemote = () => {\r\n    return axios.default\r\n      .get(this.gistUrl + '?disable-cache=' + new Date().getTime())\r\n      .then((response: axios.AxiosResponse<Storage>) => {\r\n        this.dataFetched = true;\r\n        const data = response.data;\r\n        return data;\r\n      })\r\n      .catch(err => {\r\n        // tslint:disable-next-line:no-console\r\n        console.error('Failed to load the gist.', err);\r\n        NotificationManager.error(\r\n          'Failed to load the gist:' + err,\r\n          'Error fetching',\r\n          25000\r\n        );\r\n        return null;\r\n      });\r\n  }\r\n\r\n  private saveFileToGist = (content: GistUpdate) => {\r\n    this.saveDataInLocalStorage();\r\n    this.isPushingAnUpdate = true;\r\n    return axios.default\r\n      .patch(this.gistUrl, content)\r\n      .then((response: axios.AxiosResponse<Storage>) => {\r\n        const newRevisionCount = response.data.history.length;\r\n        if (newRevisionCount > this.data.revisionCount + 1) {\r\n          NotificationManager.warning(\r\n            'Probable data loss. Please refresh!!',\r\n            'Data lost',\r\n            3000\r\n          );\r\n        }\r\n        var updateGist = new Date(response.data.updated_at);\r\n        // strange value where github set in the gist not the same time than in the save response (with 1s more :()\r\n        updateGist.setSeconds(updateGist.getSeconds() + 10);\r\n        this.lastUpdate = updateGist;\r\n        this.data.revisionCount = newRevisionCount;\r\n        this.data.state.raw_url = response.data.files[FeedStateFileKey].raw_url;\r\n        this.data.readList = this.getReadingListData(response.data.files);\r\n        // this.shouldBeSaved = false;\r\n        this.isPushingAnUpdate = false;\r\n        NotificationManager.info('Successfully saved update', 'Update', 200);\r\n      })\r\n      .catch(err => {\r\n        this.isPushingAnUpdate = false;\r\n        NotificationManager.error('Failed to save update', 'Update', 3000);\r\n        // tslint:disable-next-line:no-console\r\n        console.error('err saving state:', err);\r\n        throw err;\r\n      });\r\n  }\r\n\r\n  public updateFeedState = (feedId: number, date: Date) => {\r\n    this.data.state.updates[feedId] = date;\r\n  }\r\n\r\n  public saveFeedsState = (feedId: number, title: string, date: Date) => {\r\n    this.updateFeedState(feedId, date);\r\n    this.data.state.last_update = new Date();\r\n    this.saveFileToGist({\r\n      description: `Update publication date for feed \"${title}\"`,\r\n      files: {\r\n        [FeedStateFileKey]: { content: JSON.stringify(this.data.state, null, '\\t') }\r\n      }\r\n    });\r\n  }\r\n\r\n  private saveReadingList = (\r\n    readingList: ReadListItem[],\r\n    description: string,\r\n    state: State | null = null\r\n  ) => {\r\n    let filesToSave = {\r\n      [ReadingListFileKey]: { content: JSON.stringify(readingList, null, '\\t') }\r\n    };\r\n\r\n    if (state !== null) {\r\n      this.data.state.last_update = new Date();\r\n      filesToSave[FeedStateFileKey] = {\r\n        content: JSON.stringify(this.data.state, null, '\\t')\r\n      };\r\n    }\r\n    return this.saveFileToGist({\r\n      description: description && 'Update reading list',\r\n      files: filesToSave\r\n    });\r\n  }\r\n\r\n  public addItemToReadingList = (\r\n    item: ReadListItem,\r\n    saveAlsoFeedState: boolean\r\n  ) => {\r\n    NotificationManager.info('Adding to reading list', 'Reading list', 200);\r\n\r\n    if (this.data.readList.findIndex(i => i.url === item.url) > 0) {\r\n      NotificationManager.warning(\r\n        'Link already in the reading list...',\r\n        'Add link',\r\n        1000\r\n      );\r\n      return;\r\n    }\r\n\r\n    this.data.readList.push(item);\r\n    this.saveReadingList(\r\n      this.data.readList,\r\n      'Add item \"' + item.title + '\"',\r\n      saveAlsoFeedState ? this.data.state : null\r\n    )\r\n      // tslint:disable-next-line:no-empty\r\n      .catch(() => {});\r\n  }\r\n\r\n  public removeItemFromReadingList = (item: ReadListItem): void => {\r\n    const msg = 'Removing \"' + item.title + '\" from reading list';\r\n    NotificationManager.warning(msg, 'Reading list', 3000);\r\n    var indexFound = this.data.readList.findIndex(i => {\r\n      return i.url === item.url;\r\n    });\r\n    if (indexFound !== -1) {\r\n      this.data.readList.splice(indexFound, 1);\r\n      this.saveReadingList(this.data.readList, msg)\r\n        .then(() => {\r\n          this.lastItemRemoved = item;\r\n        })\r\n        .catch(() => {\r\n          this.data.readList.splice(indexFound, 0, item);\r\n        });\r\n    }\r\n  }\r\n\r\n  public restoreLastRemoveReadingItem = () => {\r\n    if (this.lastItemRemoved != null) {\r\n      this.data.readList.push(this.lastItemRemoved);\r\n      this.saveReadingList(\r\n        this.data.readList,\r\n        'Restoring item \"' + this.lastItemRemoved.title + '\"'\r\n      )\r\n        .then(() => {\r\n          this.lastItemRemoved = null;\r\n        })\r\n        // tslint:disable-next-line:no-empty\r\n        .catch(() => {});\r\n    }\r\n  }\r\n\r\n  public couldBeRestored = () => this.lastItemRemoved != null;\r\n\r\n  private saveDataInLocalStorage = () => {\r\n    localStorage.setItem('rssPerso', JSON.stringify(this.data, null, '\\t'));\r\n  }\r\n\r\n  public sortListByDate = (readList: ReadListItem[]) => {\r\n    return readList.sort((i1, i2) => {\r\n      return (\r\n        i2.publicationDate.getTime() -\r\n        i1.publicationDate.getTime()\r\n      );\r\n    });\r\n  }\r\n\r\n  public sortListByFeed = (readList: ReadListItem[]) => {\r\n    return readList.sort((i1, i2) => {\r\n      if (i1.idFeed === i2.idFeed) {\r\n        return i2.publicationDate.getTime() - i1.publicationDate.getTime();\r\n      }\r\n      return i1.idFeed - i2.idFeed;\r\n    });\r\n  }\r\n}\r\n","import * as axios from 'axios';\r\nimport { FeedData, GistStorage, ReadListItem } from '../storage/gistStorage';\r\nimport { NotificationManager } from 'react-notifications';\r\n\r\nexport interface Link extends ReadListItem {\r\n  read: boolean;\r\n  iconUrl: string;\r\n  feedName: string;\r\n}\r\n\r\ninterface CorsProxyHandler {\r\n  url: string;\r\n  headers: {};\r\n  responseHandler: (response: {}) => string;\r\n}\r\n\r\nconst defaultCorsProxyResponseHandler = (response: string) => {\r\n  return response;\r\n};\r\n// const defaultCorsProxyHeaders = { Origin: 'https://pmiossec.github.io/'};\r\n\r\n// cors proxy list: https://gist.github.com/jimmywarting/ac1be6ea0297c16c477e17f8fbe51347\r\nconst proxyHandlers: CorsProxyHandler[] = [\r\n  {\r\n    url: 'cors-anywhere.herokuapp.com/',\r\n    headers: { headers: {\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0'\r\n    } },\r\n    responseHandler: defaultCorsProxyResponseHandler\r\n  }\r\n  // ,\r\n  // {\r\n  //   url: 'thingproxy.freeboard.io/fetch/',\r\n  //   headers: defaultCorsProxyHeaders,\r\n  //   responseHandler: defaultCorsProxyResponseHandler\r\n  // },\r\n  // {\r\n  //   url: 'crossorigin.me/',\r\n  //   headers: defaultCorsProxyHeaders,\r\n  //   responseHandler: defaultCorsProxyResponseHandler\r\n  // }\r\n  // {\r\n  //   url: 'jsonp.herokuapp.com/?url=',\r\n  //   headers: { headers: { 'X-Requested-With': 'XMLHttpRequest' } },\r\n  //   responseHandler: (response: string) => {\r\n  //     return response;\r\n  //   }\r\n  // },\r\n  // {\r\n  //   url: 'galvanize-cors-proxy.herokuapp.com/',\r\n  //   headers: {},\r\n  //   responseHandler: (response: string) => {\r\n  //     return response;\r\n  //   }\r\n  // }\r\n];\r\n\r\nexport const noRefresh = -1;\r\nconst minute = 60 * 1000;\r\nconst hour = 60 * minute;\r\nconst oneDayInterval = 24 * hour;\r\nconst maxRefreshInterval = 30 * minute;\r\nconst minRefreshInterval = 5 * minute;\r\n\r\nexport class FeedService {\r\n  private proxySwitcher: number = 0;\r\n  private proxyHandler: CorsProxyHandler;\r\n  public httpProtocol: string;\r\n  public logo: string;\r\n  public title: string = 'Future title';\r\n  public webSiteUrl: string | null;\r\n  public links: Link[] = [];\r\n  public allLinks: Link[] = [];\r\n  public content: string;\r\n  public clearDate: Date = new Date(1900, 1, 1);\r\n  private isOrderNewerFirst = false;\r\n  private shouldDisplayAllLinks: boolean = false;\r\n  public refreshInterval: number;\r\n\r\n  constructor(\r\n    public feedData: FeedData,\r\n    public offsetDate: Date,\r\n    public storage: GistStorage\r\n  ) {\r\n    this.links = [];\r\n    this.title = feedData.name;\r\n    this.logo = feedData.icon;\r\n    this.httpProtocol = window.location.protocol;\r\n    this.proxyHandler = proxyHandlers[feedData.id % proxyHandlers.length];\r\n    if (this.offsetDate !== null) {\r\n      this.restoreInitialClearDate(this.offsetDate);\r\n    }\r\n  }\r\n\r\n  public clearAllFeed = (): void => {\r\n    if (this.links && this.links.length !== 0) {\r\n      const indexNewerLink = this.isOrderNewerFirst ? 0 : this.links.length - 1;\r\n      this.clearDate = this.links[indexNewerLink].publicationDate;\r\n    } else {\r\n      this.clearDate = new Date();\r\n    }\r\n    this.links = new Array<Link>();\r\n    this.shouldDisplayAllLinks = false;\r\n    this.storeClearDate(this.clearDate);\r\n  }\r\n\r\n  public clearFeed = (date: Date): void => {\r\n    this.updateFeedDataOnClear(date);\r\n    this.storeClearDate(this.clearDate);\r\n  }\r\n\r\n  public addItemToReadingList = (item: ReadListItem, clearFeed: boolean) => {\r\n    if (clearFeed) {\r\n      this.updateFeedDataOnClear(item.publicationDate);\r\n      this.storage.updateFeedState(this.feedData.id, item.publicationDate);\r\n    }\r\n    this.storage.addItemToReadingList(item, clearFeed);\r\n  }\r\n\r\n  public updateFeedDataOnClear(date: Date) {\r\n    this.clearDate = date;\r\n    this.links = this.links.filter(l => l.publicationDate > this.clearDate);\r\n    this.shouldDisplayAllLinks = false;\r\n  }\r\n\r\n  public getLinksToDisplay(): Link[] {\r\n    return this.shouldDisplayAllLinks ? this.allLinks : this.links;\r\n  }\r\n\r\n  public isDisplayingAllLinks(): boolean {\r\n    return (\r\n      this.shouldDisplayAllLinks || this.allLinks.length === this.links.length\r\n    );\r\n  }\r\n\r\n  public displayAllLinks(): void {\r\n    this.shouldDisplayAllLinks = !this.shouldDisplayAllLinks;\r\n  }\r\n\r\n  // tslint:disable-next-line:no-any\r\n  private processFeedXml = (response: axios.AxiosResponse<any>) => {\r\n    this.allLinks = [];\r\n    this.links = [];\r\n    const parser = new DOMParser();\r\n    try {\r\n      var content = this.proxyHandler.responseHandler(response.data);\r\n      const xmlDoc = parser.parseFromString(content, 'text/xml');\r\n      const feedFormat = xmlDoc.documentElement.tagName;\r\n      switch (feedFormat) {\r\n        case 'rss':\r\n        case 'rdf:RDF':\r\n          this.manageRssFeed(xmlDoc.documentElement);\r\n          break;\r\n        case 'feed':\r\n          this.manageAtomFeed(xmlDoc.documentElement);\r\n          break;\r\n        default:\r\n          const error = `${this.feedData.url} => Feed format not supported:` + feedFormat;\r\n          // tslint:disable-next-line:no-console\r\n          console.error(error);\r\n          NotificationManager.error(error, 'Feed format not supported', 5000);\r\n          this.title = error;\r\n      }\r\n\r\n      this.allLinks = this.sortFeed(this.allLinks);\r\n      this.links = this.sortFeed(this.links);\r\n\r\n      if (!this.title) {\r\n        this.title = this.feedData.url;\r\n      }\r\n    } catch (ex) {\r\n      this.title = `${this.feedData.url} Error loading :( Error: ${ex}`;\r\n    }\r\n    this.calculateRefreshInterval();\r\n    // tslint:disable-next-line:no-console\r\n    console.info('Refresh ' + this.title, this.refreshInterval / 1000);\r\n  }\r\n\r\n  public loadFeedContent(): Promise<void> {\r\n    const url = this.feedData.noCorsProxy\r\n      ? this.feedData.url\r\n      : this.httpProtocol + '//' + this.proxyHandler.url + this.feedData.url;\r\n    return axios.default\r\n      .get(url, this.feedData.noCorsProxy ? undefined : this.proxyHandler.headers)\r\n      .then(this.processFeedXml)\r\n      .catch(err => {\r\n        this.proxySwitcher++;\r\n        if (this.proxySwitcher > proxyHandlers.length) {\r\n          return new Promise<void>((resolve, reject) => {\r\n            reject();\r\n          });\r\n        }\r\n\r\n        this.proxyHandler =\r\n          proxyHandlers[\r\n            (this.feedData.id + this.proxySwitcher) % proxyHandlers.length\r\n          ];\r\n        return this.loadFeedContent();\r\n        // localStorage.setItem('use_proxy.' + this.url, 'true');\r\n      });\r\n  }\r\n\r\n  private storeClearDate(clearDate: Date): void {\r\n    this.storage.saveFeedsState(\r\n      this.feedData.id,\r\n      this.feedData.name,\r\n      clearDate\r\n    );\r\n  }\r\n\r\n  private restoreInitialClearDate(clearDate: Date): void {\r\n    if (this.clearDate < clearDate) {\r\n      this.clearDate = clearDate;\r\n    }\r\n  }\r\n\r\n  private manageRssFeed(xmlDoc: HTMLElement): void {\r\n    const channel = this.getElementByTagName(xmlDoc, 'channel');\r\n    if (channel) {\r\n      this.webSiteUrl = this.getElementContentByTagName(channel, 'link');\r\n    }\r\n\r\n    const items = xmlDoc.getElementsByTagName('item');\r\n    for (var iItems = 0; iItems < items.length; iItems++) {\r\n      const item = items.item(iItems);\r\n      if (!item) {\r\n        continue;\r\n      }\r\n      var link = {\r\n        url: this.getElementContentByTagName(item, 'link'),\r\n        title: item\r\n          ? this.getElementContentByTagName(item, 'title')\r\n          : 'No tile found :(',\r\n        publicationDate: this.getLinkRssDate(item),\r\n        read: false,\r\n        iconUrl: this.feedData.icon,\r\n        feedName: this.feedData.name,\r\n        idFeed: this.feedData.id\r\n      };\r\n\r\n      this.allLinks.push(link);\r\n      if (link.publicationDate > this.clearDate) {\r\n        this.links.push(link);\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseDate(date: string): Date {\r\n    return new Date(\r\n      date.endsWith('Z') ? date.substr(0, date.length - 1) : date\r\n    );\r\n  }\r\n\r\n  private getLinkRssDate(element: Element): Date {\r\n    var publicationDateElement = this.getElementByTagName(element, 'pubDate');\r\n    if (publicationDateElement && publicationDateElement.textContent) {\r\n      return this.parseDate(publicationDateElement.textContent);\r\n    }\r\n\r\n    publicationDateElement = this.getElementByTagName(element, 'dc:date');\r\n    if (publicationDateElement && publicationDateElement.textContent) {\r\n      return this.parseDate(publicationDateElement.textContent);\r\n    }\r\n\r\n    // tslint:disable-next-line:no-console\r\n    console.log('date not found :(', this.feedData.url);\r\n    return new Date(2000, 1, 1);\r\n  }\r\n\r\n  private getElementContentByTagName(\r\n    element: Element | Document,\r\n    tagName: string\r\n  ): string {\r\n    const foundElement = this.getElementByTagName(element, tagName);\r\n    if (foundElement && foundElement.textContent) {\r\n      return foundElement.textContent;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private getElementByTagName(\r\n    element: Element | Document,\r\n    tagName: string\r\n  ): Element | null {\r\n    if (!element || !element.children) {\r\n      return null;\r\n    }\r\n    var iElement: number;\r\n    for (iElement = 0; iElement < element.children.length; iElement++) {\r\n      const foundElement = element.children.item(iElement);\r\n      if (foundElement && foundElement.tagName === tagName) {\r\n        return foundElement;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // private formatWebsiteUrl(url: string): string {\r\n  //   return url; // .replace('https://', 'http://');\r\n  // }\r\n\r\n  private manageAtomFeed(xmlDoc: HTMLElement): void {\r\n    // console.log(`Processing Atom feed ( ${this.url} )...`);\r\n    this.title = this.getElementContentByTagName(xmlDoc, 'title');\r\n    // this.logo = this.getElementContentByTagName(xmlDoc, 'icon');\r\n    const linksWebSite = xmlDoc.getElementsByTagName('link');\r\n    for (var iLinks = 0; iLinks < linksWebSite.length; iLinks++) {\r\n      var tag = linksWebSite.item(iLinks);\r\n      if (tag && tag.getAttribute('rel') === 'alternate') {\r\n        this.webSiteUrl = tag.getAttribute('href');\r\n        break;\r\n      }\r\n    }\r\n    // if (!this.logo && this.webSiteUrl) {\r\n    //   this.logo = this.formatWebsiteUrl(this.webSiteUrl) + '/favicon.ico';\r\n    // }\r\n    const items = xmlDoc.getElementsByTagName('entry');\r\n    for (var iEntries = 0; iEntries < items.length; iEntries++) {\r\n      const item = items.item(iEntries);\r\n      if (!item) {\r\n        continue;\r\n      }\r\n\r\n      const linkFound = this.getElementByTagName(item, 'link');\r\n      if (!linkFound) {\r\n        continue;\r\n      }\r\n      var link = {\r\n        url: linkFound.getAttribute('href') as string,\r\n        title: this.getElementContentByTagName(item, 'title'),\r\n        publicationDate: this.getLinkAtomDate(item),\r\n        read: false,\r\n        iconUrl: this.feedData.icon,\r\n        feedName: this.feedData.name,\r\n        idFeed: this.feedData.id\r\n      };\r\n      this.allLinks.push(link);\r\n      if (link.publicationDate > this.clearDate) {\r\n        this.links.push(link);\r\n      }\r\n    }\r\n  }\r\n\r\n  private sortFeed = (links: Link[]): Link[] => {\r\n    const inverter = this.isOrderNewerFirst ? -1 : 1;\r\n    return links.sort((l1, l2) => {\r\n      return inverter * (l1.publicationDate < l2.publicationDate ? -1 : 1);\r\n    });\r\n  }\r\n\r\n  private getLinkAtomDate(element: Element): Date {\r\n    var publicationDateElement = this.getElementByTagName(element, 'published');\r\n    if (publicationDateElement && publicationDateElement.textContent) {\r\n      return this.parseDate(publicationDateElement.textContent);\r\n    }\r\n\r\n    publicationDateElement = this.getElementByTagName(element, 'updated');\r\n    if (publicationDateElement && publicationDateElement.textContent) {\r\n      return this.parseDate(publicationDateElement.textContent);\r\n    }\r\n\r\n    return new Date();\r\n  }\r\n\r\n  public calculateRefreshInterval() {\r\n    if (!this.allLinks || this.allLinks.length === 0) {\r\n      this.refreshInterval = maxRefreshInterval;\r\n      return;\r\n    }\r\n\r\n    const lastFeedDate = this.allLinks[this.allLinks.length - 1].publicationDate;\r\n    const lastRefreshInterval = new Date().getTime() - lastFeedDate.getTime();\r\n    if (lastRefreshInterval > 2 * oneDayInterval) {\r\n      this.refreshInterval = noRefresh;\r\n      return;\r\n    }\r\n\r\n    if (lastRefreshInterval > oneDayInterval) {\r\n      this.refreshInterval = maxRefreshInterval;\r\n      return;\r\n    }\r\n\r\n    const dates = this.allLinks.map(l => {\r\n      return l.publicationDate.getTime();\r\n    });\r\n\r\n    const datesExcludingFirstAndLast = dates.slice(1, dates.length - 1);\r\n    const diffs: number[] = [];\r\n    for (let i = 0; i < datesExcludingFirstAndLast.length - 1 ; i++) {\r\n      diffs.push(datesExcludingFirstAndLast[i + 1] - datesExcludingFirstAndLast[i]);\r\n    }\r\n\r\n    const meanInterval = diffs.reduce((d1, d2) => d1 + d2, 0) / diffs.length;\r\n    this.refreshInterval = Math.max(\r\n      Math.min(maxRefreshInterval, meanInterval / 2),\r\n      minRefreshInterval\r\n    ) + Math.random() * minute ;\r\n  }\r\n}\r\n","import * as React from 'react';\nimport * as Helper from '../helper';\nimport { FeedService, Link, noRefresh } from './feedService';\nimport { ReadListItem } from '../storage/gistStorage';\n\ninterface IFeedProps {\n  key: number;\n  feed: FeedService;\n  id: number;\n  unsecured?: boolean;\n}\n\ninterface IFeedState { }\n\nexport class Feed extends React.Component<IFeedProps, IFeedState> {\n  shouldDisplayEmptyFeeds: boolean = false;\n  hiddenTextArea: HTMLTextAreaElement = document.createElement('textarea');\n  timerId: number;\n\n  componentWillMount(): void {\n    this.loadFeed().then(() => {\n      if (this.props.feed.refreshInterval === noRefresh) {\n        this.timerId = -1;\n        return;\n      }\n      this.timerId = window.setInterval(\n        () => this.loadFeed(),\n        this.props.feed.refreshInterval\n      );\n    });\n  }\n\n  componentWillUnmount(): void {\n    if (this.timerId !== -1) {\n      window.clearInterval(this.timerId);\n    }\n  }\n\n  loadFeed(): Promise<void> {\n    return this.props.feed.loadFeedContent().then(() => {\n      this.forceUpdate();\n    });\n  }\n\n  refresh(): void {\n    this.forceUpdate();\n  }\n\n  clearAllFeed = (): void => {\n    this.props.feed.clearAllFeed();\n    this.forceUpdate(() => {\n      this.displayFeedOnTopOfTheScreen((this.props.id + 1).toString());\n    });\n  }\n\n  refreshFeed = (): void => {\n    this.loadFeed();\n  }\n\n  clearFeed = (date: Date): void => {\n    this.props.feed.clearFeed(date);\n    this.displayFeedOnTopOfTheScreen((this.props.id).toString());\n    this.forceUpdate();\n  }\n\n  displayFeedOnTopOfTheScreen(feedId: string) {\n    const feed = document.getElementById(feedId);\n    if (feed != null) {\n      feed.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest',\n        behavior: 'smooth'\n      });\n    }\n  }\n\n  displayAll = (): void => {\n    this.props.feed.displayAllLinks();\n    this.forceUpdate();\n  }\n\n  unsecureUrl = (url: string) => {\n    return this.props.unsecured ? url.replace('https://', 'http://') : url;\n  }\n\n  openAll = (): void => {\n    this.props.feed.getLinksToDisplay().forEach(element => {\n      window.open(this.unsecureUrl(element.url), '_blank', 'noreferrer');\n    });\n    this.clearAllFeed();\n  }\n\n  addToReadList = (item: ReadListItem, index: number) => {\n    return () => {\n      const removingItem = index === 0;\n      this.props.feed.addItemToReadingList(item, removingItem);\n      if (removingItem) {\n        this.forceUpdate();\n      }\n    };\n  }\n\n  removeIfFirstOnClick = (item: ReadListItem, index: number) => {\n    return () => {\n      setTimeout(() => {\n        const shouldRemoveItem = index === 0;\n        if (shouldRemoveItem) {\n          this.clearFeed(item.publicationDate);\n          this.forceUpdate();\n        }\n      },\n                 200);\n  };\n  }\n\n  private decodeEntities = (encodedString: string) => {\n    this.hiddenTextArea.innerHTML = encodedString;\n    return this.hiddenTextArea.value;\n  }\n\n  private replaceInTitle = (title: string) => {\n    // https://emojiterra.com/fr/activites/\n    return this.decodeEntities(title)\n      .replace('  ', ' ')\n      .replace('Equipe de France', '🇫🇷‍')\n      .replace('Jeux olympiques', '🏅')\n      .replace('Tennis', '🎾')\n      .replace('Basket', '🏀')\n      .replace('Football', '⚽')\n      .replace('Handball', '🤾')\n      .replace('Rugby', '🏉')\n      .replace('Golf', '⛳')\n      .replace('Cyclisme', '🚴‍')\n      .replace('Sports US', '🇺🇸')\n      .replace('Sports d\\'hiver', '🎿')\n      .replace('Judo', '🥋')\n      .replace('Volley', '🏐')\n      .replace('Boxe', '🥊')\n      .replace('Voile', '⛵')\n      .replace('Equitation', '🏇🏻')\n      .replace('Natation', '🏊🏻')\n      .replace('Escrime', '🤺')\n      .replace('Athlétisme', '🏃‍')\n      .replace('Auto/Moto', '🏎');\n  }\n\n  render() {\n    let options = null;\n    const linksToDisplay = this.props.feed.getLinksToDisplay()\n      .filter(l => this.props.feed.feedData.filter === undefined\n      || l.title.indexOf(this.props.feed.feedData.filter) === -1);\n    if (linksToDisplay.length !== 0) {\n      options = (\n        <span>\n          <div className=\"text-badge close\" onClick={this.clearAllFeed}>\n            <a>\n              {linksToDisplay.length}\n            </a>\n          </div>\n          <div className=\"text-badge refresh\" onClick={this.refreshFeed}>\n            <a> ⟳\n            </a>\n          </div>\n          {!this.props.feed.isDisplayingAllLinks() &&\n            <div className=\"text-badge\" onClick={this.displayAll}>\n              <a>All</a>\n            </div>}\n          {linksToDisplay.length !== 0 &&\n            <div className=\"text-badge open\" onClick={this.openAll}>\n              <a>Open All</a>\n            </div>}\n        </span>\n      );\n    } else {\n      if (this.shouldDisplayEmptyFeeds) {\n        options = (\n          <span>\n            <div className=\"text-badge\" onClick={this.displayAll}>\n              <a>All</a>{'  '}\n            </div>{' '}\n            - Nothing new :(\n          </span>\n        );\n      } else {\n        return <div id={this.props.id.toString()} />;\n      }\n    }\n\n    let links = (\n      <div>\n        {linksToDisplay.map((l: Link, i: number) =>\n          <div key={i}>\n            [<a onClick={this.clearFeed.bind(null, l.publicationDate)}>\n              {Helper.DateFormatter.formatDate(l.publicationDate)}\n            </a>|\n            <a onClick={this.addToReadList(l, i)}>📑</a>]\n            <a\n              href={this.unsecureUrl(l.url)}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              onClick={this.removeIfFirstOnClick(l, i)}\n            >\n              {this.props.feed.feedData.enhance === true ? this.replaceInTitle(l.title) : l.title}\n            </a>\n          </div>\n        )}\n      </div>\n    );\n\n    return (\n      <div className=\"feed\" id={this.props.id.toString()}>\n        <div className=\"title\">\n          <div>\n            <img src={this.props.feed.logo} />\n            <a href={this.props.feed.webSiteUrl as string} target=\"_blank\" rel=\"noreferrer\" >\n              {' '}{this.props.feed.title}\n            </a>\n          </div>\n          <div>\n            {options}\n          </div>\n        </div>\n        {linksToDisplay.length !== 0 && links}\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport * as Helper from '../helper';\nimport { GistStorage, ReadListItem, Gist } from '../storage/gistStorage';\n\ninterface IReadingListProps {\n  data: Gist;\n  store: GistStorage;\n}\n\ninterface IReadingListState {}\n\nexport class ReadingList extends React.Component<\n  IReadingListProps,\n  IReadingListState\n> {\n  private displayReadingList: boolean = false;\n  private sortByDate: boolean = false;\n\n  componentDidMount(): void {\n    setInterval(() => this.refreshReadingList(), 30000);\n  }\n\n  refreshReadingList = () => {\n    this.setState({});\n  }\n\n  remove = (item: ReadListItem): void => {\n    this.props.store.removeItemFromReadingList(item);\n    this.refreshReadingList();\n  }\n\n  openAndRemoveLink = (item: ReadListItem) => {\n    return () => {\n      setTimeout(() => {\n        this.remove(item);\n      },         200);\n    };\n  }\n\n  toggleVisibility = () => {\n    this.displayReadingList = !this.displayReadingList;\n    this.refreshReadingList();\n  }\n\n  changeSort = () => {\n    this.sortByDate = !this.sortByDate;\n    this.props.data.readList = this.sortByDate\n      ? this.props.store.sortListByDate(this.props.data.readList)\n      : this.props.store.sortListByFeed(this.props.data.readList);\n    this.refreshReadingList();\n  }\n\n  render() {\n    var readItems;\n    if (!this.props.data) {\n      readItems = <div>loading...</div>;\n    } else {\n      const data = this.props.data;\n      readItems = data.readList.map((l: ReadListItem, i: number) => {\n        const feed = data.feeds.find(f => f.id === l.idFeed);\n        return (\n          <div key={i}>\n            [<span className=\"date\">\n              {Helper.DateFormatter.formatDate(l.publicationDate)}\n            </span>\n            |<a href={l.url} target=\"_blank\" rel=\"noreferrer\">\n              📄\n            </a>\n            |<a onClick={this.remove.bind(null, l)}>❌</a>]\n            <a href={l.url} target=\"_blank\" rel=\"noreferrer\" onClick={this.openAndRemoveLink(l)}>\n              {feed && <img src={feed.icon} />}\n              {l.title}\n            </a>\n          </div>\n        );\n      });\n    }\n\n    if (this.props.data) {\n      return (\n        <div className=\"feed\">\n          <div className=\"title\">\n            <a onClick={this.toggleVisibility}>\n              📑 Reading list ({!this.props.data.readList\n                ? 0\n                : this.props.data.readList.length}):\n            </a>\n            {this.displayReadingList &&\n              <a onClick={this.changeSort}>Sort by {this.sortByDate ? 'feed' : 'date'} </a>}\n            {this.props.store.couldBeRestored() &&\n              <a onClick={this.props.store.restoreLastRemoveReadingItem}>\n                Restore last deleted item{' '}\n              </a>}\n          </div>\n          <div className=\"links\">\n            {this.displayReadingList && readItems}\n          </div>\n        </div>\n      );\n    } else {\n      return <div />;\n    }\n  }\n}\n","import * as React from 'react';\r\nimport { GistStorage, Gist, FeedData } from './storage/gistStorage';\r\nimport { FeedService } from './feeds/feedService';\r\nimport { Feed } from './feeds/feed';\r\nimport { ReadingList } from './readingList/readingList';\r\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\ninterface IMainProps { }\r\ninterface IMainState {\r\n  data: Gist;\r\n  store: GistStorage;\r\n  feedServices: FeedService[];\r\n}\r\n\r\nexport class Main extends React.Component<IMainProps, IMainState> {\r\n  private isUpdated: boolean = false;\r\n  private refreshTimer: number;\r\n  private darkModeEnabled: boolean;\r\n  GetFeed(): string {\r\n    const feeds: string[] = [\r\n      '1d800438c2edee3e07e547a3d4d20ef1' , // Philippe\r\n      '774782376fbd8d01a8bc2669cdbf6096' // Khanh\r\n    ];\r\n\r\n    if (window.location.search.indexOf('khanh') !== -1) {\r\n      return feeds[1];\r\n    }\r\n    return feeds[0];\r\n  }\r\n\r\n  loadGist(store: GistStorage) {\r\n    store.loadGist().then(data => {\r\n\r\n      if (this.state === null) {\r\n        const feedServices = data.feeds.map((feedConfig: FeedData) =>\r\n          new FeedService(\r\n            feedConfig,\r\n            data.state.updates[feedConfig.id],\r\n            store\r\n          )\r\n        );\r\n        this.setState({ store, data, feedServices });\r\n      } else {\r\n        const newState = {... this.state};\r\n        for (let i = 0; i < data.feeds.length; i++) {\r\n          newState.feedServices[i].updateFeedDataOnClear(data.state.updates[data.feeds[i].id]);\r\n        }\r\n        this.setState(newState);\r\n        this.forceUpdate();\r\n      }\r\n    });\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.darkModeEnabled = window.location.search.indexOf('dark') !== -1;\r\n    document.addEventListener('visibilitychange', this.handleVisibilityChange, false);\r\n    const store = new GistStorage(this.GetFeed());\r\n    this.loadGist(store);\r\n\r\n    this.refreshTimer = window.setInterval(\r\n      () => store.isGistUpdated().then(isUpdated => {\r\n        if (isUpdated) {\r\n          this.isUpdated = true;\r\n          window.clearInterval(this.refreshTimer);\r\n          this.forceUpdate();\r\n          NotificationManager.warning(\r\n            'Need refresh!!',\r\n            'Updated',\r\n            5000\r\n          );\r\n\r\n          this.loadGist(store);\r\n        }\r\n      }),\r\n      1000 * 60\r\n    );\r\n  }\r\n\r\n  // clearAll = () => {\r\n  //   this.state.data.feeds.forEach(f => f.clearFeed());\r\n  //   this.forceUpdate();\r\n  // }\r\n\r\n  // displayAll = () => {\r\n  //   this.state.data.feeds.forEach(f => f.displayAllLinks());\r\n  //   this.forceUpdate();\r\n  // }\r\n\r\n  displayAllLinks = (feedService: FeedService, id: number) => {\r\n    return () => {\r\n      feedService.displayAllLinks();\r\n\r\n      this.forceUpdate(() => { this.displayFeedOnTopOfTheScreen(id.toString()); });\r\n    };\r\n  }\r\n\r\n  handleVisibilityChange = () => {\r\n    if (!document.hidden && this.isUpdated) {\r\n      location.reload();\r\n    }\r\n  }\r\n\r\n  displayFeedOnTopOfTheScreen(feedId: string) {\r\n    const feed = document.getElementById(feedId);\r\n    if (feed != null) {\r\n      feed.scrollIntoView(true);\r\n    }\r\n  }\r\n\r\n  hashCode = (text: string) => {\r\n    // tslint:disable-next-line:no-bitwise\r\n    return text.split('').reduce((a, b) => { a = (a << 5) - a + b.charCodeAt(0); return a & a; }, 0);\r\n  }\r\n\r\n  render() {\r\n    if (this.state === null) {\r\n      return (\r\n        <main className={this.darkModeEnabled ? 'dark' : 'light'}>\r\n          <div className=\"loading\">\r\n            <div>loading feeds...</div>\r\n            <div className=\"spinner\">&#9676;</div>\r\n          </div>\r\n        </main>);\r\n    }\r\n\r\n    return (\r\n      <main className={this.darkModeEnabled ? 'dark' : 'light'}>\r\n        <div className=\"feeds\">\r\n          <NotificationContainer />\r\n          {/* <div className=\"displayModes\">\r\n          <a onClick={this.clearAll}>Clear All</a> / <a onClick={this.displayAll}>Show All</a>\r\n        </div> */}\r\n          {/* <div>\r\n        {this.state.data.feeds.map((feed: FeedData, i: number) =>\r\n             <img key={i} src={feed.icon} height=\"16px\" alt={feed.name} />\r\n          )}\r\n        </div> */}\r\n          <div className=\"feeds\">\r\n            {this.state.feedServices.map((feedService: FeedService, i: number) =>\r\n              <Feed\r\n                key={feedService.feedData.id}\r\n                id={i}\r\n                feed={feedService}\r\n                unsecured={feedService.feedData.notSecured}\r\n              />\r\n            )}\r\n          </div>\r\n          <ReadingList data={this.state.data} store={this.state.store} />\r\n        </div>\r\n        <div>\r\n        {this.state.feedServices.map((feedService: FeedService, i: number) =>\r\n              <img\r\n                key={feedService.feedData.id}\r\n                src={feedService.logo}\r\n                height=\"16\"\r\n                width=\"16\"\r\n                onClick={this.displayAllLinks(feedService, i)}\r\n                title={feedService.title}\r\n              />\r\n            )}\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n","import 'es6-promise';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { Main } from './app/main';\n\nimport './index.css';\n\nReactDOM.render(\n  <Main/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}